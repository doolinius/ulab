{
    "number": "3-3",
    "name": "Files, I/O Redirection and Pipes",
    "description": "The Unix philosophy, as described by Doug McIlroy is as follows: \n\t1) Write small programs that do one thing and do it well. \n\t2) Write programs to work together, and... \n\t3) Write these tools to work with simple text streams, a universal data format. \n\nThis lab will illustrate these principles by giving you practice with simple Unix tools, creating text, redirecting output and of course, pipes.",
    "dataFiles": true,
    "submitMessage":"",
    "steps": [
        {
            "shortText": "Change to the lab_data directory",
            "text": "This lab has extracted a folder of data files in your home directory. You need to change to this directory.",
            "tasks": [
                "[change to the lab_data directory]"
            ],
            "tips": "This is the same first step as lab 3-2.",
            "test": {
                "testType": "script",
                "command": "cd.sh",
                "condition": true
            },
            "successMessage": "Very good, you have changed to this new directory. The files will be different for this lab, however.",
            "retryMessage": "Hmmm... Looks like you're in the wrong directory. You should start all labs from your home directory. Type 'ls' to make sure the 'lab_data' directory is there. Type 'pwd' to see if you are in your home directory."
        },
        {
            "shortText": "View the directory and contents of a file",
            "text":"Ok, let's see what's in the directory, and in one of the files.",
            "tasks": ["[list the contents of the directory]", "[use the 'cat' command to see what is in people.txt]"],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "You will use the same commands from previous labs for this step.",
            "successMessage": "You should see some familiar names in the people.txt file.",
            "retryMessage": "I'm not sure why this would fail."
        },
        {
            "shortText": "Viewing a file with 'less'",
            "text":"You often need to look at the contents of a file that is too large for cat to display on one screen. You will use a program known as a 'pager' to view it.",
            "tasks": ["less using_less.txt"],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "Press 'q' to exit 'less' when you are finished. .",
            "successMessage": "Pagers are very useful for viewing files when there is too much output for cat, or that you cannot or do not want to modify.",
            "retryMessage": "I'm not sure why this would fail."
        },
        {
            "shortText": "Open a file with a text editor",
            "text":"Let's use a text editor to view a file this time. 'nano' is a basic text editor available on most Unix systems.",
            "tasks": ["nano using_nano.txt"],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "This file contains some basic information about the 'nano' text editor. Read this information carefully.",
            "successMessage": "Did you see the flag? If you missed it, try opening the file again.",
            "retryMessage": "I'm not sure why this would fail."
        },
        {
            "shortText": "Creating a new file with a text editor",
            "text":"Now use nano to create a new file. Enter the following command, use the editor to type your full name, then save and exit.",
            "tasks": ["nano me.txt"],
            "test": {
                "testType": "command",
                "command": "ls me.txt",
                "condition": true
            },
            "tips": "Remember that nano displays the keyboard shortcuts at the bottom of the screen. And don't try to use your mouse, no matter how tempting it may be.",
            "successMessage": "Very good. Editing text files is a very common task when running Unix systems. Most of their configuration is done using text files, so this is a task that you should become very familiar with.",
            "retryMessage": "I don't see the file called 'me.txt'. Be sure that you saved the file from nano, or that you named it correctly."
        },
        {
            "shortText": "Printing text with the 'echo' command",
            "text":"Next we're going to look at the 'echo' command. Echo is something like a print statement, that prints what you tell it to.",
            "tasks": ["echo \"Tony Stark\""],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "'echo' is not the same thing as 'cat'. 'cat' prints the contents of a file, while 'echo' prints text that is passed to it.",
            "successMessage": "Nothing major, just a print statement for now.",
            "retryMessage": "Should not fail."
        },
        {
            "shortText": "Using Output Redirection",
            "text":"Now let's look at a feature called Output Redirection. Most commands that produce output print this output to the terminal, as we see right now. That's what happend with the 'echo' command in the last step. But you can also redirect the output to a file instead.",
            "tasks": ["echo \"Tony Stark\" > iron_man.txt", "ls", "cat iron_man.txt"],
            "test": {
                "testType": "command",
                "command": "ls iron_man.txt",
                "condition": true
            },
            "tips": "The '>' character is the output redirect character. If you add this character and a filename to the end of a command, the output will go to the filename you provide instead of the terminal. The '>' even looks like a funnel that's going to take the output and funnel it into a file.",
            "successMessage": "Notice how you didn't see any output when you redirected it to the 'iron_man.txt' file. But the 'ls' command confirms that it was created, and the 'cat' command shows that the output redirected successfully.",
            "retryMessage": "The iron_man.txt file does not exist here. Double check your command syntax and filenam spelling and try again."
        },
        {
            "shortText": "Combining the content of multiple files",
            "text":"Now let's 'cat' three files at once, in two different ways.",
            "tasks": [
                "cat people.txt me.txt iron_man.txt",
                "cat people.txt me.txt iron_man.txt > everyone.txt",
                "ls"
            ],
            "test": {
                "testType": "command",
                "command": "ls everyone.txt",
                "condition": true
            },
            "tips": "The first command will output the contents of all three files at once. The second one will redirect the output to a new file.",
            "successMessage": "You now have the content of all three files in one. This use of cat and output redirection can be used to easily combine the contents of multiple files into just one.",
            "retryMessage": "It looks like 'everyone.txt' is still not there. Double check your spelling and command syntax and try again."
        },
        {
            "shortText": "Using Pipes",
            "text":"Now for a demonstration of 'pipes', a fundamental part of the Unix philosophy and one of the most useful parts of the command line. A pipe is similar to output redirection, but instead of sending the output to a file, it sends it as the input to another program. In this case, it will send the output of the 'cat' command as input for the 'less' pager. Remember to press 'q' to exit the pager.",
            "tasks": [
                "cat everyone.txt | less"
            ],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "The pipe symbol is '|', sometimes called the vertical bar, usually typed by pressing Shift + the backslash key.",
            "successMessage": "Sometimes the output of a command is too much to view in the terminal, so piping the output to 'less' gives you an easy way to read it. This was a simple example of using pipes.",
            "retryMessage": "Should not fail."
        },
        {
            "shortText": "Using pipes to count lines and sort",
            "text":"Now let's look at a couple more interesting examples. You will still cat 'everyone.txt' but this time you will pipe the output to two different programs. The first is the 'wc' or 'word count' program. You will pass '-l' to count only the lines. The second is 'sort', which not surprisingly, will sort the lines of the file.",
            "tasks": [
                "[cat everyone.txt and pipe to 'wc -l']",
                "[cat everyone.txt and pipe to 'sort']"
            ],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "The command will be the same as the previous step, but you will pipe to 'wc -l' and 'sort' instead of 'less'.",
            "successMessage": "We're starting to see the Unix philosophy at work.",
            "retryMessage": "Should not fail."
        },
        {
            "shortText": "Sorting and removing duplicates with pipes",
            "text":"You can continue to add more pipes to a single command, and even combine them with output redirection. Let's try that. You will pipe the output of cat to sort, then to a program called 'uniq' that removes duplicate lines of text. First you will run the command so you can see the output, then redirect the same command to a new file.",
            "tasks": [
                "cat everyone.txt | sort | uniq",
                "cat everyone.txt | sort | uniq > everyone_sorted.txt"
            ],
            "test": {
                "testType": "command",
                "command": "ls everyone_sorted.txt",
                "condition": true
            },
            "tips": "As long as a program/command is written to accept input this way, it can be used in a pipe.",
            "successMessage": "Pipelines such as this allow a Unix user to string together multiple commands to produce miniature programs to perform a task.",
            "retryMessage": "The file 'everyone_sorted.txt' does not exist. Check your spelling and command syntax and try again."
        },
        {
            "shortText": "A more fun example with pipes",
            "text":"How about something a little more... colorful.",
            "tasks": [
                "cat message.txt | cowsay | lolcat"
            ],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "No tips, just run that pipeline of commands. Hehehe..",
            "successMessage": "You can't accuse Unix developers of not having a sense of humor.",
            "retryMessage": "Should not fail."
        },
        {
            "shortText": "Using 'echo' to view Environment Variables",
            "text":"The last few steps involve Environment Variables. When you're logged into a Unix system, you have what is called an 'environment', which consists of settings that are used by the shell and even by programs and commands that you run from the shell. Some environment variables are customizable, while others are set automatically. You can even add your own environment variables. Their names are usually in call caps, but to print them you have to begin the name with a dollar sign ('$'). Let's have a look at a few.",
            "tasks": [
                "echo $USER",
                "echo $PWD",
                "echo $SHELL"
            ],
            "test": {
                "testType": "command",
                "command": "true",
                "condition": true
            },
            "tips": "Remember the echo command from earlier? This time we're using it to view the contents of environment variables.",
            "successMessage": "These variables contain your username, your present working directory, and the shell program you're currently using. The PWD variable is set automatically every time you change to a new directory. You can see all current environment variables with the 'env' command.",
            "retryMessage": "Should not fail."
        },
        {
            "shortText": "Changing the shell prompt",
            "text":"The 'PS1' environment variable controls the appearance of your shell prompt. Let's customize it. To create or reset an environment variable, we use the 'export' command.",
            "tasks": [
                "echo $PS1",
                "export PS1=\"(\\u) -> \" (there is a space at the end before the \""
            ],
            "test": {
                "testType": "checkvar",
                "command": "PS1",
                "value":"(\\u) -> ",
                "condition": true
            },
            "tips": "Make sure you enter the command exactly as above, including spaces.",
            "successMessage": "This will only temporarily change your shell prompt. It will go back to the default if you log out and back in.",
            "retryMessage": "The PS1 environment variable does not equal the sequence specified. Double check everything, as it must be exact."
        },
        {
            "shortText": "Creating a new Environment Variable",
            "text":"Now let's create our own environment variable. On some Unix systems, there is an environment variable called 'PAGER' that determines which pager program to use when a command needs to display a large amount of text. This system does not have this variable set, so let's do so.",
            "tasks": [
                "echo $PAGER     (should be blank)",
                "export PAGER=less"
            ],
            "test": {
                "testType": "command",
                "command": "test \"$PAGER\" = \"less\"",
                "condition": true
            },
            "tips": "When you echo a non-existent environment variable, it will be blank.",
            "successMessage": "Good job. Like PS1 before, this will only temporarily change your shell prompt. It will go back to the default if you log out and back in.",
            "retryMessage": "The PAGER environment variable does not equal 'less'. Double check everything, as it must be exact."
        },
        {
            "shortText": "Modifying the executable PATH variable",
            "text":"The PATH environment variable is one of the most important. It is a colon separated list of absolute/full paths to folders that contain external commands. The commands are usually binary executables, so most of the time these paths end in 'bin', the traditional directory name for program file binaries (in Windows, these would have a .exe extension). It is sometimes necessary to change your PATH variable to add new paths for software that is installed on your system. Let's see how this works.",
            "tasks": [
                "hello   (should produce 'command not found' error)",
                "echo $PATH",
                "export OLDPATH=$PATH",
                "export PATH=$PATH:/opt/bin",
                "hello"
            ],
            "test": {
                "testType": "command",
                "command": "hello",
                "condition": true
            },
            "tips": "We're saving your current PATH in another variable, just in case something goes wrong. Modifying the PATH variable here consists of using the old value of $PATH, and adding :/opt/bin to it.",
            "successMessage": "Great work. You've modified your PATH environment variable. Just as with previous examples, this change is only temporary. To make it permanent, you can modify the '.bash_profile' file in your home directory and add the export commands you wish.",
            "retryMessage": "It would seem 'hello' still cannot be run. Run the command 'export PATH=$OLDPATH' and try modifying the PATH variable again."
        },
        {
            "shortText": "Cleanup and Finish",
            "text":"To finish this lab, we'll go back to your home directory and remove the files that were extracted for this lab.",
            "tasks": [
                "cd",
                "rm -rf lab_data"
            ],
            "test": {
                "testType": "script",
                "command": "finish.sh",
                "condition": true
            },
            "tips": "",
            "successMessage": "Ok, it looks like you've removed all of the lab files and have finished. Very good.",
            "retryMessage": "You may have missed something. You are either in the wrong directory, or the lab_data directory has not yet been removed."
        }
    ],
    "flags": [7878, 1705, 3035],
    "bonusFlags": [1029, 4567]
}
